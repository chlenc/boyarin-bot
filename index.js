const TelegramBot = require("node-telegram-bot-api");
const helpers = require('./helpers');
const TOKEN = '528549200:AAE4uCDX6fo1y7pztwfoOVqemNWz5uZyRuI';
const fs = require('fs')
const crm = require('./crm');
const frases = require('./frases')

//https://www.youtube.com/watch?v=G_FlX41qADE

console.log('Bot has been started ....');

const bot = new TelegramBot(TOKEN, {
    polling: {
        interval: 300,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

const homeKey = {
    reply_markup: {
        keyboard: [['üí∞ –¶–µ–Ω—ã'], ['üìù –ó–∞–ø–∏—Å—å']]
    }
};
const writeKey = {
    reply_markup: {
        keyboard: [
            ['üìÖ –í—ã–±–æ—Ä –¥–∞—Ç—ã', '‚úÇÔ∏è –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞'],
            [/*{
                text : 'üì≤ –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫',
                request_contact: true
            },*/ 'üîô –ù–∞–∑–∞–¥']
        ],
        // one_time_keyboard: true
    }
};

bot.on('message', msg => {
    //console.log(msg)
    const chatId = msg.chat.id;

    if (msg.contact) {
        helpers.addContact(bot, msg)
    }
    else if (msg.text == 'üí∞ –¶–µ–Ω—ã') {
        bot.sendPhoto(chatId, fs.readFileSync(__dirname+'/price.png'),{
            reply_markup: homeKey.reply_markup,
            caption: 'üíà–°–¢–û–ò–ú–û–°–¢–¨ –ù–ê–®–ò–• –£–°–õ–£–ìüíà'
        })
        // bot.sendMessage(chatId, "–°–¢–û–ò–ú–û–°–¢–¨ –ù–ê–®–ò–• –£–°–õ–£–ì\n" +
        //     "\n" +
        //     "–ú—É–∂—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏:\n" +
        //     "–ú–æ–¥–µ–ª—å–Ω–∞—è –º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 600 —Ä—É–±\n" +
        //     "–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º - 450 —Ä—É–±\n" +
        //     "–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ (–¥–æ 10 –ª–µ—Ç) - 350 —Ä—É–±\n" +
        //     "–°—Ç—Ä–∏–∂–∫–∞ –º–∞—à–∏–Ω–∫–æ–π —ç–∫—Å–ø—Ä–µ—Å—Å - 300 —Ä—É–±\n" +
        //     "–ú—É–∂—Å–∫–∞—è —É–∫–ª–∞–¥–∫–∞ - 300 —Ä—É–±\n" +
        //     "\n" +
        //     "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã –∏ —É—Å–æ–≤:\n" +
        //     "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ –±—Ä–∏—Ç—å–µ - 500 —Ä—É–±\n" +
        //     "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã –∏ —É—Å–æ–≤ - 500 —Ä—É–±\n" +
        //     "–¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –±–æ—Ä–æ–¥—ã/–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ - 700 —Ä—É–±\n" +
        //     "–ú—É–∂—Å–∫–∞—è –¥–µ–ø–∏–ª—è—Ü–∏—è –æ—Ç - 300 —Ä—É–±\n" +
        //     "\n" +
        //     "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏:\n" +
        //     "–°—Ç—Ä–∏–∂–∫–∞ –∏ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ –±—Ä–∏—Ç—å–µ - 1100 —Ä—É–±\n" +
        //     "–°—Ç—Ä–∏–∂–∫–∞ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ä–æ–¥—ã - 1100 —Ä—É–±\n" +
        //     '–°—Ç—Ä–∏–∂–∫–∞ "–û—Ç–µ—Ü –∏ —Å—ã–Ω" - 800 —Ä—É–±')
        // setTimeout(() => {
        //     bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ü§î', homeKey)
        // }, 500)
    }
    else if (msg.text == 'üìù –ó–∞–ø–∏—Å—å') {
        bot.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —á–∞—Å—ã –µ–≥–æ —Ä–∞–±–æ—Ç—ã', writeKey)
    }
    else if (msg.text == 'üîô –ù–∞–∑–∞–¥') {
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ü§î', homeKey)
    }
    else if (msg.text == 'üìÖ –í—ã–±–æ—Ä –¥–∞—Ç—ã') {
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ', helpers.choice_month_key(new Date()))
    }
    else if (msg.text == '‚úÇÔ∏è –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞') {
        var masters;
        try {
            crm.getMastersKey(function (err, masters_keyboard) {
                bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:', {
                    reply_markup: {
                        inline_keyboard: masters_keyboard
                    }
                })
            });
        } catch (e) {
            bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üôÑ', {})
        }
    }
})

bot.on('callback_query', query => {

    const {chat, message_id, text} = query.message;
    // console.log(query.data);

    if (query.data.split("&&")[0] == 'm') { //2.1
        var master = query.data.split("&&")[1];
        var id = query.data.split("&&")[2];
        crm.getDatesByMaster(id, master, function (err, key) {
            bot.deleteMessage(chat.id, message_id);
            bot.sendMessage(chat.id, '–ú–∞—Å—Ç–µ—Ä ' + master + ' —Ä–∞–±–æ—Ç–∞–µ—Ç :  ', {
                reply_markup: {
                    inline_keyboard: key
                }
            })
        })
    } //2.1 -> 2.2

    if (query.data.split("&&")[0] == 'md') {//2.2
        var name = query.data.split("&&")[2];
        var date = query.data.split("&&")[1];
        var id = query.data.split("&&")[3];
        crm.getTimeByMasterAndDate(id, date, name, function (err, key) {
            key.push([
                {text: '–ó–∞–∫–∞–∑ –∑–≤–æ–Ω–∫–∞', callback_data: 'request_a_call'},
                {text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_masters_keyboard'}]);
            bot.deleteMessage(chat.id, message_id);
            bot.sendMessage(chat.id, '–ú–∞—Å—Ç–µ—Ä ' + name + ' ' + date.split('-')[2] + '.' + date.split('-')[1] + '.' + date.split('-')[0] + ' —Å–≤–æ–±–æ–¥–µ–Ω –≤:', {
                reply_markup: {
                    inline_keyboard: key
                }
            })
        })
    } //2.2 -> 2.3

    if (query.data.split("&&")[0] == 'mdt') { //(1)2.4
        var client = chat.first_name;
        var date = query.data.split("&&")[2];
        var time = query.data.split("&&")[3];
        time = time[0] + time[1] + ":" + time[2] + time[3]
        var master = query.data.split("&&")[1];
        var id = query.data.split("&&")[4];
        // console.log(date+' '+time+':00',id)
        bot.deleteMessage(chat.id, message_id);
        var username = chat.username;
        if (username == undefined)
            username = 'tg://user?id=' + chat.id;
        else {
            username = '\n\n–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º: @' + username + ` <a href="tg://user?id=${chat.id}">${client}</a>`;
        }

        helpers.getUserData(chat.id, function (callback, error) {
            if (error) {
                bot.sendMessage(chat.id, frases.error_message, homeKey)
            } else {
                crm.setAppointment(callback, date + ' ' + time + ':00', id, function (success) {
                    if (success) {
                        bot.sendMessage(helpers.applicationChatId, "–ó–∞–ø–∏—Å—å: \n" + client + ' –∑–∞–ø–∏—Å–∞–Ω –∫  ' + master + ' ' + date.split('-')[2] + '.' + date.split('-')[1]
                            + '.' + date.split('-')[0] + ' –≤ ' + time + '. ' + username, {parse_mode:"HTML"})
                        bot.sendMessage(chat.id, client + ', –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫  ' + master + ' ' + date.split('-')[2] + '.' + date.split('-')[1]
                            + '.' + date.split('-')[0] + ' –≤ ' + time + '.',homeKey)
                    } else {
                        bot.sendMessage(chat.id, frases.error_message, homeKey)
                    }
                })
            }
        })

        // bot.sendMessage(chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ü§î', homeKey)
    }

    if (query.data.split("&&")[0] == 'd') { //1.1 -> 2.2
        var date = query.data.split('&&')[1];
        crm.getMastersByDateKey(date, function (err, key) {
            bot.deleteMessage(chat.id, message_id);
            bot.sendMessage(chat.id, date.split('-')[2] + '.' + date.split('-')[1] + '.' + date.split('-')[0] + ' —Ä–∞–±–æ—Ç–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–∞—Å—Ç–µ—Ä–∞:', {
                reply_markup: {
                    inline_keyboard: key
                }
            })
        })
    }

    if (query.data.split("&&")[0] == 'dm') { //1.2 -> 2.3
        var date = query.data.split('&&')[1];
        var name = query.data.split('&&')[2];
        var id = query.data.split('&&')[3];
        crm.getTimeByMasterAndDate(id, date, name, function (err, key) {
            key.push([
                {text: '–ó–∞–∫–∞–∑ –∑–≤–æ–Ω–∫–∞', callback_data: 'request_a_call'},
                {text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_date_name_key'}]);
            bot.deleteMessage(chat.id, message_id);
            bot.sendMessage(chat.id, '–ú–∞—Å—Ç–µ—Ä ' + name + ' ' + date.split('-')[2] + '.' + date.split('-')[1] + '.' + date.split('-')[0] + ' —Å–≤–æ–±–æ–¥–µ–Ω –≤:', {
                reply_markup: {
                    inline_keyboard: key
                }
            })
        })
    }

    switch (query.data) { //1.1
        case 'back_to_date_name_key':
            bot.deleteMessage(chat.id, message_id)
            bot.sendMessage(chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ', helpers.choice_month_key(new Date()))
            break
        case 'back_to_write_key':
            bot.deleteMessage(chat.id, message_id)
            bot.sendMessage(chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —á–∞—Å—ã –µ–≥–æ —Ä–∞–±–æ—Ç—ã', writeKey)
            break
        case 'request_a_call':
            bot.deleteMessage(chat.id, message_id)
            bot.sendMessage(chat.id, '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', {
                reply_markup: {
                    keyboard: [
                        [{
                            text: 'üì≤ –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫',
                            request_contact: true
                        }], ['üîô –ù–∞–∑–∞–¥']
                    ]
                }
            })
            break
        case 'back_to_masters_keyboard':
            var masters;
            try {
                crm.getMastersKey(function (err, masters_keyboard) {
                    bot.sendMessage(chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:', {
                        reply_markup: {
                            inline_keyboard: masters_keyboard
                        }
                    })
                });
            } catch (e) {
                bot.sendMessage(chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üôÑ', {})
            }

            break

    }
    ;

    bot.answerCallbackQuery({
        callback_query_id: query.id
    })

})

bot.onText(/\/start/, msg => {
    helpers.start(msg);
    bot.sendMessage(msg.chat.id, frases.phone, {
        reply_markup: {
            keyboard: [[{
                text: 'üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
                request_contact: true
            }]]
        }
    })
})
// bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, ' + msg.from.first_name + '! ' + '\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ü§î', homeKey)


bot.onText(/\/help/, msg => {
    bot.sendMessage(msg.chat.id, msg.from.first_name + ',' + '—ç—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø—Ä–∏—ë–º –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å –≤–∞—Å —Å –ø—Ä–∞–π—Å –ª–∏—Å—Ç–æ–º.', homeKey)
})

bot.onText(/\/about/, msg => {
    bot.sendMessage(msg.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π helpexcel –≤ 2018 –≥–æ–¥—É.\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: +79151272664 (–ê–ª–µ–∫—Å–µ–π)' +
        '\n\n–ë–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫: @helpexcel_bot \n\n–°–∞–π—Ç: http://helpexcel.pro/', homeKey)
})

bot.onText(/\/chatId/, function (msg) {
    bot.sendMessage(msg.chat.id, msg.chat.id);
});
// bot.onText(/\/echo/, function (msg) {
//     helpers.getUserData(msg.chat.id,function (callback,error) {
//         if(error){
//             console.log('error')
//         }else {
//             console.log(callback)
//         }
//     })
// });



